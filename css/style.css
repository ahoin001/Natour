/**********************************************************
                        Variables
**********************************************************/
/* CSS RESET */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* All elements will inherit box sizing from html selector below */
  box-sizing: inherit; }

/* Root font size should be set in html */
html {
  /* 10, so that it will be easier to calculate rem throught css */
  /* font-size: 10px; */
  /* If we base our sizes off 10px, and want user to be able to adjust the font in browser settings
        we do the size we want (10px) divided by browser default of 16(in this case), which is 62.5% .
        Now if user changes browser font size, our sizes can react from the new browser font size
    */
  font-size: 62.5%; }

body {
  box-sizing: border-box; }

/* TODO Create an animation */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    /* Off screen on left */
    transform: translateX(-10rem); }
  80% {
    /* Move alittle far right */
    transform: translateX(2rem); }
  100% {
    opacity: 1;
    /* Return to  Original position */
    transform: translateX(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    /* Off screen on left */
    transform: translateX(10rem); }
  80% {
    /* Move alittle far right */
    transform: translateX(-2rem); }
  100% {
    opacity: 1;
    /* Return to  Original position */
    transform: translateX(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    /* Off screen on left */
    transform: translateY(30px); }
  100% {
    opacity: 1;
    /* Return to  Original position */
    transform: translateY(0); } }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  margin-bottom: 6rem;
  /* TODO Fix for animations that cause parent to "shake" */
  backface-visibility: hidden; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out; }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation-name: moveInRight;
    animation-duration: 1s;
    animation-timing-function: ease-out; }

body {
  /* Project Wide font defintions */
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 1.6rem;
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.btn {
  /* Link is psuedo for links that have not been visited yet */
  /* Visited is visited */
  /* When button is clicked, it "moves down" from the hover states higher y value */
  /* Its actually -1px from its starting state, but this emulates a push down affect */
  /* Places an element directly after, for example <a href=#> wqefw (:after element is here)  </a>  */
  /* Position absolute to our btn:link :visited .   */
  /* TODO marcos : PLease explain why this overwrites previous after, instead of being a new one 
                 Is it because an element will only have one even if multiple classes give it one?
*/ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    border-radius: 10rem;
    position: relative;
    font-size: 1.6rem;
    /* All above properties are animateable because of 'all', and will take .2 seconds 
    This includes the transforming animations, so now our click and hover are a smooth .2s
  */
    transition: all 0.2s; }
  .btn:hover {
    transform: translateY(-3px);
    /*  X shadow , Y shadow , Blur , black with .2 opacity*/
    box-shadow: 0px 1rem 2rem rgba(0, 0, 0, 0.2);
    /* On hover the button in the back will grow and fade */ }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active {
    transform: translateY(-1px);
    /* On Click decrease shadow to help the feeling of pressing button ddown */
    box-shadow: 0px 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777;
    display: inline-block; }
    .btn--white:after {
      background-color: #fff;
      /* background-color: wheat; */ }
  .btn:after {
    /* Content is whatver would be inside element*/
    content: "";
    display: inline-block;
    /* Make it same size as btn*/
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* Place it behind button and under button */
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    /* TO SEE THE AFTER ELEMENT, REMOVE -1 INDEX AND CHANGE BGC (Must also comment out from btn white:after class*/
    /* background-color: white; */
    /* background-color: wheat; */
    /* opacity: 1; */
    transition: all 0.4s; }
  .btn--animated {
    /* animation: moveInnBottom .5s ease-out .75s; */
    animation-name: moveInBottom;
    animation-duration: 0.7s;
    animation-timing-function: ease-out;
    /* So that button will start with animation instead of render and then animate */
    animation-fill-mode: backwards; }

.header {
  /* Height will always be 95% height of view port */
  height: 95vh;
  position: relative;
  /* First background is gradient we want on top of background image */
  background-image: linear-gradient(to right bottom, rgba(85, 197, 122, 0.8), rgba(40, 180, 133, 0.8)), url("../img/hero.jpg");
  background-size: cover;
  /* So When window is shrinking only bottom will be cropped */
  background-position: top;
  /* TODO To choose how much of header will be shown */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    /* TODO Setting width or height alone, the browser will figure out the other */
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /* TODO To Move element, position absolute moves left of div to postion, we move another half to finish centering */
    transform: translate(-50%, -50%);
    text-align: center; }
